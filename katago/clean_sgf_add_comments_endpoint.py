from sgfmill import sgf
import json

def clean_sgf(sgf_data):
    game = sgf.Sgf_game.from_string(sgf_data)
    cleaned_sgf = []
    cleaned_sgf.append("(")
    root_node = game.get_root()
    cleaned_sgf.append(";")
    for prop, values in root_node.get_raw_property_map().items():
        if prop not in ['C', 'GC', 'GB', 'GW', 'TR', 'SQ']:
            for value in values:
                cleaned_sgf.append(f"{prop}[{value.decode('utf-8')}]")
    node = root_node
    while node:
        child = node[0]
        cleaned_sgf.append(";")
        for prop, values in child.get_raw_property_map().items():
            if prop not in ['C', 'GC', 'GB', 'GW', 'TR', 'SQ']:
                for value in values:
                    cleaned_sgf.append(f"{prop}[{value.decode('utf-8')}]")
        node = child
    cleaned_sgf.append(")")
    cleaned_sgf_str = "".join(cleaned_sgf)
    return cleaned_sgf_str

def convert_to_sgf(coord, board_size):
    col, row = coord[0], int(coord[1:])
    x = ord(col) - ord('A')
    if col > 'I':
        x -= 1
    y = board_size - row
    sgf_col = chr(ord('a') + x)
    sgf_row = chr(ord('a') + y)
    return sgf_col + sgf_row

# Katago output processing based on new format
def process_katago_output(json_output):
    katago_data = json.loads(json_output)
    correct_moves_dictionary = {}

    for puzzle in katago_data["createdPuzzles"]:
        turn = puzzle["move_number"]
        correct_moves = puzzle["solution_coordinates"]
        correct_moves_dictionary[turn] = correct_moves

    return correct_moves_dictionary

def inject_sgf_copy(sgf_content, correct_moves_dictionary):
    original_sgf_game = sgf.Sgf_game.from_string(sgf_content)
    board_size = original_sgf_game.get_size()
    for key in correct_moves_dictionary:
        index = sgf_content.find(';')
        for _ in range(key):
            index = sgf_content.find(';', index + 1)
        semicolon_index = index
        color = sgf_content[index + 1]
        index = sgf_content.find(']', index)
        new_sgf_content = sgf_content[:semicolon_index] + \
            "\n(" + sgf_content[semicolon_index:index + 1] + \
            "C[Incorrect - This was the actual move played in the game!])"
        correct_moves = correct_moves_dictionary[key].split(', ')
        correct_comments = []
        for move in correct_moves:
            sgf_move = convert_to_sgf(move, board_size)
            correct_comments.append(
                '(;{}[{}]C[CORRECT])'.format(color, sgf_move))
        correct_comments.reverse()
        final_sgf_content = new_sgf_content + \
            '\n' + '\n'.join(correct_comments) + ')'
        return final_sgf_content

# ****************** Testing locally ******************** #

sgf_data = "(;GM[1]FF[4]CA[UTF-8]AP[CGoban:3]ST[2] RU[Chinese]SZ[19]KM[7.50]TM[300] GN[]PW[青瓦楼阁]PB[anning97]DT[2023-07-09]C[SGF generated by KaTrain 1.12.3ㅤ​]RE[B+Resign]KTV[1.0]RL[0]RN[3]TC[3]TT[30] ;B[qd] ;W[dp] ;B[pq] ;W[dd] ;B[cc] ;W[dc] ;B[cd] ;W[ce] ;B[be] ;W[bf] ;B[cf] ;W[de] ;B[bg] ;W[bd] ;B[af] ;W[bc] ;B[nc] ;W[qo] ;B[ql] ;W[op] ;B[oq] ;W[np] ;B[mr] ;W[lq] ;B[mq] ;W[mp] ;B[lp] ;W[kq] ;B[lo] ;W[rq] ;B[qr]C[Move 31: B R2 Score: W+3.9 Win rate: W 71.1% Estimated point loss: 4.3 Predicted top move was S2 (B+0.5). PV: BS2 K4 O6 P6 P7 O7 Q6 P5 P8 R3 R2 M6 Move was #96 according to policy (0.00%). Top policy move was K4 (40.0%). ㅤ​] ;W[rr] ;B[lr] ;W[kr] ;B[nq]C[Move 35: B O3 Score: W+8.9 Win rate: W 87.0% Estimated point loss: 4.4 Predicted top move was J4 (W+4.2). PV: BJ4 K4 K5 J3 H4 H3 G3 G4 G2 J5 H5 L5 J6 M6 N5 L4 Move was #33 according to policy (0.03%). Top policy move was J4 (29.8%). ㅤ​] ;W[on] ;B[jp] ;W[iq] ;B[ip] ;W[hq] ;B[go] ;W[fp] ;B[ol] ;W[nm] ;B[mk] ;W[rd] ;B[re] ;W[qc] ;B[rc] ;W[pd] ;B[qe] ;W[rb] ;B[sd] ;W[pe] ;B[pc] ;W[oc] ;B[qb] ;W[nd] ;B[ob] ;W[od]C[Move 60: W P16 Score: W+5.4 Win rate: W 78.3% Estimated point loss: 4.8 Predicted top move was M7 (W+10.4). PV: WM7 K7 L8 K8 L9 K9 L10 N12 Move was #134 according to policy (0.01%). Top policy move was M7 (32.0%). ㅤ​] ;B[mc] ;W[md] ;B[ld] ;W[le] ;B[ke] ;W[kf]C[Move 66: W L14 Score: W+0.5 Win rate: W 55.3% Estimated point loss: 5.4 Predicted top move was M14 (W+6.0). PV: WM14 F5 E5 L14 M13 P13 L13 L16 M7 K7 L9 Move was #3 according to policy (1.72%). Top policy move was M14 (75.8%). ㅤ​] ;B[kd])"
print(clean_sgf(sgf_data))

katago_json_output = '''{
    "createdPuzzles": [
        {
            "id": 1,
            "sgf_id": 1,
            "sgf_data": "(;GM[1]FF[4]CA[UTF-8]AP[CGoban:3]ST[2] RU[Chinese]SZ[19]KM[7.50]TM[300] GN[]PW[青瓦楼阁]PB[anning97]DT[2023-07-09]C[SGF generated by KaTrain 1.12.3ㅤ​]RE[B+Resign]KTV[1.0]RL[0]RN[3]TC[3]TT[30] ;B[qd] ;W[dp] ;B[pq] ;W[dd] ;B[cc] ;W[dc] ;B[cd] ;W[ce] ;B[be] ;W[bf] ;B[cf] ;W[de] ;B[bg] ;W[bd] ;B[af] ;W[bc] ;B[nc] ;W[qo] ;B[ql] ;W[op] ;B[oq] ;W[np] ;B[mr] ;W[lq] ;B[mq] ;W[mp] ;B[lp] ;W[kq] ;B[lo] ;W[rq] ;B[qr]C[Move 31: B R2 Score: W+3.9 Win rate: W 71.1% Estimated point loss: 4.3 Predicted top move was S2 (B+0.5). PV: BS2 K4 O6 P6 P7 O7 Q6 P5 P8 R3 R2 M6 Move was #96 according to policy (0.00%). Top policy move was K4 (40.0%). ㅤ​] ;W[rr] ;B[lr] ;W[kr] ;B[nq]C[Move 35: B O3 Score: W+8.9 Win rate: W 87.0% Estimated point loss: 4.4 Predicted top move was J4 (W+4.2). PV: BJ4 K4 K5 J3 H4 H3 G3 G4 G2 J5 H5 L5 J6 M6 N5 L4 Move was #33 according to policy (0.03%). Top policy move was J4 (29.8%). ㅤ​] ;W[on] ;B[jp] ;W[iq] ;B[ip] ;W[hq] ;B[go] ;W[fp] ;B[ol] ;W[nm] ;B[mk] ;W[rd] ;B[re] ;W[qc] ;B[rc] ;W[pd] ;B[qe] ;W[rb] ;B[sd] ;W[pe] ;B[pc] ;W[oc] ;B[qb] ;W[nd] ;B[ob] ;W[od]C[Move 60: W P16 Score: W+5.4 Win rate: W 78.3% Estimated point loss: 4.8 Predicted top move was M7 (W+10.4). PV: WM7 K7 L8 K8 L9 K9 L10 N12 Move was #134 according to policy (0.01%). Top policy move was M7 (32.0%). ㅤ​] ;B[mc] ;W[md] ;B[ld] ;W[le] ;B[ke] ;W[kf]C[Move 66: W L14 Score: W+0.5 Win rate: W 55.3% Estimated point loss: 5.4 Predicted top move was M14 (W+6.0). PV: WM14 F5 E5 L14 M13 P13 L13 L16 M7 K7 L9 Move was #3 according to policy (1.72%). Top policy move was M14 (75.8%). ㅤ​] ;B[kd])",
            "category": "other",
            "move_number": 31,
            "solution_coordinates": "{K4: [K4, K3], O6:[O6], R3:[R3] }",
            "difficulty": 1500,
            "status": "queued",
            "job_id": null,
            "updatedAt": "2023-09-22 22:24:59",
            "createdAt": "2023-09-22 22:24:59"
        }
    ]
}'''

# cleaned_sgf_string = clean_sgf(sgf_data)
# correct_moves_dictionary = process_katago_output(katago_json_output)
# final_sgf_string = inject_sgf_copy(cleaned_sgf_string, correct_moves_dictionary)
# print(final_sgf_string)
