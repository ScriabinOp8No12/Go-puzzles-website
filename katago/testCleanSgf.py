from sgfmill import sgf

def clean_sgf(sgf_text):
    game = sgf.Sgf_game.from_string(sgf_text)
    cleaned_sgf = []

    # Add root properties
    cleaned_sgf.append("(")
    root_node = game.get_root()
    cleaned_sgf.append(";")
    for prop, values in root_node.get_raw_property_map().items():
        # exclude comments, game comment, good for black/white, add black/white stones, triangle and square symbol, add empty (delete move in branch)
        if prop not in ['C', 'GC', 'GB', 'GW', 'AB', 'AW', 'TR', 'SQ', 'AE']:
            for value in values:
                cleaned_sgf.append(f"{prop}[{value.decode('utf-8')}]")  # Decode bytes object

    # Add main branch nodes
    node = root_node
    while node:
        if node:  # Check if node has children
            child = node[0]  # Consider only the first child (main branch)
            cleaned_sgf.append(";")
            for prop, values in child.get_raw_property_map().items():
                # exclude comments, game comment, good for black/white, add black/white stones, triangle and square symbol, add empty (delete move in branch)
                if prop not in ['C', 'GC', 'GB', 'GW', 'AB', 'AW', 'TR', 'SQ', 'AE']:
                    for value in values:
                        cleaned_sgf.append(f"{prop}[{value.decode('utf-8')}]")  # Decode bytes object
            node = child
        else:
            node = None

    cleaned_sgf.append(")")

    cleaned_sgf_str = "".join(cleaned_sgf)
    print(cleaned_sgf_str)  # Print the cleaned SGF string
    return cleaned_sgf_str


sgf_string = """(;GM[1]FF[4]CA[UTF-8]AP[CGoban:3]ST[2]
RU[Chinese]SZ[19]KM[375.00]TM[300]
GN[]PW[éç¦æ¥¼é]PB[anning97]DT[2023-07-09]RE[B+Resign]RL[0]RN[3]TC[3]TT[30]
;B[qd]
;W[dp]
;B[pq]
;W[dd]
;B[cc]
;W[dc]
;B[cd]
;W[ce]
;B[be]
;W[bf]
;B[cf]
;W[de]
;B[bg]
;W[bd]
;B[af]
;W[bc]
;B[nc]
;W[qo]
;B[ql]
;W[op]
;B[oq]
;W[np]
;B[mr]
;W[lq]
;B[mq]
;W[mp]
;B[lp]
;W[kq]
;B[lo]
;W[rq]
;B[qr]
;W[rr]
;B[lr]TR[io][ip]
(;W[kr]
(;B[nq]C[COMMENT CORRECT]
;W[on]
;B[jp]
;W[iq]
;B[ip]
;W[hq]
;B[go]
;W[fp]
;B[ol]
;W[nm]
;B[mk]
;W[rd]
;B[re]
;W[qc]
;B[rc]
;W[pd]
;B[qe]
;W[rb]
;B[sd]
;W[pe]
(;B[pc]
;W[oc]
;B[qb]
;W[nd]
;B[ob]
;W[od]
;B[mc]
;W[md]
;B[ld]
;W[le]
;B[ke]
;W[kf]
;B[kd]
;W[lf]
;B[nf]
;W[pg]
;B[nh]
;W[ne]
;B[of]
;W[pf]
;B[jf]
;W[jg]
;B[kg]
;W[lh]
;B[kh]
;W[if]
;B[je]
;W[lg]
;B[ki]
;W[li]
;B[kj]
;W[mj]
;B[nj]
;W[lk]
;B[lj]
;W[mi]
;B[ni]
;W[nk]
;B[ok]
;W[nl]
;B[ml]
;W[lm]
;B[ll]
;W[kk]
;B[kl]
;W[jk]
;B[ii]
;W[ig]
;B[ij]
;W[ik]
;B[km]
;W[hk]
;B[gi]
;W[in]
;B[jn]
;W[hp]
;B[io]
;W[ho]
;B[im]
;W[hn]
;B[hm]
;W[gm]
;B[gl]
;W[gk]
;B[hl]
;W[fl]
;B[fm]
;W[gn]
;B[fk]
;W[el]
;B[fj]
;W[ln]
;B[kn]
;W[kp]
;B[hj]
;W[ko]
;B[jj]
;W[pj]
;B[oj]
;W[qj]
;B[rk]
;W[oh]
;B[oi]
;W[rg]
;B[pi]
;W[qi]
;B[ph]
;W[og]
;B[ng]
;W[qh]
;B[qf]
;W[qg]
;B[rj]
;W[ri]
;B[sh]
;W[si]
;B[sg]
;W[rm]
;B[qm]
;W[rn]
;B[om]
;W[nn]
;B[sf]
;W[rl]
;B[qk]
;W[qn]
;B[pk]
;W[pm]
;B[rf]
;W[me]
;B[rh]
;W[sk]
;B[sj]
;W[sl]
;B[ge]
;W[hc]
;B[cb]
;W[bb]
;B[fc]
;W[lc]
;B[lb]
;W[ie]
;B[kc]
;W[ff]
;B[gf]
;W[gg]
;B[fe]
;W[ef]
;B[eb]
;W[db]
;B[hg]
;W[hf]
;B[hh]
;W[fg]
;B[hd]
;W[id]
;B[ic]
;W[ib]
;B[jc]
;W[gd]
;B[gc]
;W[he]
;B[fd]
;W[hd]
;B[gb]
;W[hb]
;B[jb]
;W[ea]
;B[fa]
;W[da]
;B[ha]
;W[ia]
;B[ga]
;W[jo]
;B[jl]
;W[cl]
;B[cq]
;W[cp]
;B[bp]
;W[br]
;B[bq]
;W[dr]
;B[cr]
;W[ar]
;B[dq]
;W[er]
;B[eq]
;W[fr]
;B[co]
;W[bn]
;B[fq]
;W[gr]
;B[ep]
;W[do]
;B[eo]
;W[dn]
;B[bo]
;W[cs]
;B[cn]
;W[bm]
;B[bs]
;W[ds]
;B[dm]
;W[en]
;B[dl]
;W[fn]
;B[cm]
;W[ck]
;B[dk]
;W[cj]
;B[bi]
;W[ch]
;B[ci]
;W[di]
;B[dj]
;W[dh]
;B[bj]
;W[bh]
;B[ah]
;W[bk]
;B[ak]
;W[bl]
;B[an]
;W[or]
;B[os]
;W[ps]
;B[ns]
;W[pr]
;B[qs]
;W[ls]
;B[aq]
;W[ad]
;B[al]
;W[ae]
;B[am]
;W[bf]
;B[ag]
;W[cg]
;B[ai]
;W[em]
;B[fo]
;W[gp]
;B[ei]
;W[eh]
;B[be]
;W[ec]
;B[ja]
;W[bf]
;B[ih]
;W[df]
;B[mm]
;W[mn]
;B[fh]
;W[gh]
;B[fi]
;W[ek]
;B[jh]
;W[fb]
;B[ej]
;W[pn]
;B[gq]
;W[pl]
;B[oe]
;W[eb]
;B[jd]
;W[mf]
;B[ed])
(;AW[ne][nf][of][ng][qg]AB[pf][og][pg][oh][ph][qh]))
(;AW[kn][ln][mn][nn][ko][no]AB[oo][po][pp][nq]TR[ln][mn]))
(;AW[ii][gk][pl][pm][gn][nq]AB[nl][mm]))
"""


clean_sgf(sgf_string)
